"""
üöÄ REAL INDICATORS CALCULATOR - REMPLACER DONN√âES HARDCOD√âES
‚úÖ RSI calcul√© r√©ellement (pas 50.0 hardcod√©)
‚úÖ MACD calcul√© r√©ellement (pas 0.0 hardcod√©)
‚úÖ Prix r√©els via yfinance
‚úÖ Historique pour calculs techniques
‚úÖ Validation et cache
‚úÖ Fallback en cas d'erreur
"""

import yfinance as yf
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import logging
from typing import Dict, Optional
import warnings
warnings.filterwarnings('ignore')

# Configuration du logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - [%(name)s] %(message)s')
logger = logging.getLogger("REAL_INDICATORS_CALCULATOR")

class RealIndicatorsCalculator:
    """Calculateur d'indicateurs techniques avec vraies donn√©es"""
    
    def __init__(self):
        self.cache = {}
        self.cache_duration = 300  # 5 minutes
        
    def get_real_market_data(self, symbol: str) -> Optional[Dict]:
        """
        R√âCUP√âRER VRAIES DONN√âES DE MARCH√â AVEC INDICATEURS
        
        Objectifs :
        1. Prix r√©els via yfinance
        2. Historique pour calculs RSI/MACD
        3. Validation et cache
        4. Fallback en cas d'erreur
        """
        
        cache_key = f"market_data_{symbol}"
        if cache_key in self.cache:
            data, timestamp = self.cache[cache_key]
            if (datetime.now() - timestamp).seconds < self.cache_duration:
                logger.debug(f"üìä Utilisation cache pour {symbol}")
                return data
        
        try:
            logger.info(f"üìä R√©cup√©ration donn√©es r√©elles {symbol}...")
            
            # R√©cup√©rer donn√©es via yfinance
            ticker = yf.Ticker(symbol)
            hist = ticker.history(period="30d", interval="1d")
            info = ticker.info
            
            if hist.empty or len(hist) < 30:
                logger.warning(f"‚ö†Ô∏è Donn√©es insuffisantes pour {symbol}")
                return self._get_fallback_data(symbol)
            
            # Calculer indicateurs techniques R√âELS
            rsi = self._calculate_real_rsi(hist['Close'])
            sma_20 = self._calculate_real_sma(hist['Close'], 20)
            sma_50 = self._calculate_real_sma(hist['Close'], 50)
            macd = self._calculate_real_macd(hist['Close'])
            
            # Construire donn√©es de march√© r√©elles
            market_data = {
                'symbol': symbol,
                'price': float(hist['Close'].iloc[-1]),
                'volume': int(hist['Volume'].iloc[-1]),
                'change_24h': float((hist['Close'].iloc[-1] / hist['Close'].iloc[-2] - 1) * 100),
                'rsi': float(rsi),
                'sma_20': float(sma_20),
                'sma_50': float(sma_50),
                'macd': float(macd),
                'market_cap': info.get('marketCap'),
                'timestamp': datetime.now(),
                'source': 'yfinance_real'
            }
            
            # Valider les donn√©es
            if self._validate_market_data(market_data):
                # Mettre en cache
                self.cache[cache_key] = (market_data, datetime.now())
                logger.info(f"üìä Donn√©es r√©elles {symbol}: Prix=${market_data['price']:.2f}, RSI={market_data['rsi']:.1f}, MACD={market_data['macd']:.4f}")
                return market_data
            else:
                logger.warning(f"‚ö†Ô∏è Validation √©chou√©e pour {symbol}")
                return self._get_fallback_data(symbol)
                
        except Exception as e:
            logger.error(f"‚ùå Erreur donn√©es r√©elles {symbol}: {e}")
            return self._get_fallback_data(symbol)
    
    def _calculate_real_rsi(self, prices: pd.Series, period: int = 14) -> float:
        """Calculer RSI r√©el"""
        try:
            delta = prices.diff()
            gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
            loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()
            
            rs = gain / loss
            rsi = 100 - (100 / (1 + rs))
            
            # Prendre la derni√®re valeur valide
            rsi_clean = rsi.dropna()
            if len(rsi_clean) > 0:
                return float(rsi_clean.iloc[-1])
            else:
                return 50.0  # Valeur neutre si pas assez de donn√©es
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur calcul RSI: {e}")
            return 50.0
    
    def _calculate_real_sma(self, prices: pd.Series, period: int) -> float:
        """Calculer SMA r√©el"""
        try:
            sma = prices.rolling(window=period).mean()
            sma_clean = sma.dropna()
            if len(sma_clean) > 0:
                return float(sma_clean.iloc[-1])
            else:
                return float(prices.iloc[-1])  # Fallback prix actuel
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur calcul SMA: {e}")
            return float(prices.iloc[-1])
    
    def _calculate_real_macd(self, prices: pd.Series) -> float:
        """Calculer MACD r√©el"""
        try:
            ema_12 = prices.ewm(span=12).mean()
            ema_26 = prices.ewm(span=26).mean()
            macd = ema_12 - ema_26
            
            macd_clean = macd.dropna()
            if len(macd_clean) > 0:
                return float(macd_clean.iloc[-1])
            else:
                return 0.0  # Fallback neutre
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur calcul MACD: {e}")
            return 0.0
    
    def _validate_market_data(self, data: Dict) -> bool:
        """Valider coh√©rence des donn√©es"""
        try:
            # V√©rifier prix positif
            if data['price'] <= 0:
                logger.warning(f"‚ö†Ô∏è Prix invalide: {data['price']}")
                return False
            
            # V√©rifier prix r√©aliste (pas de prix √† $5.7 trillions!)
            if data['price'] > 1000000:  # Plus de $1M suspect
                logger.warning(f"‚ö†Ô∏è Prix suspect: ${data['price']:,.2f}")
                return False
            
            # V√©rifier changement 24h r√©aliste
            if abs(data['change_24h']) > 50:  # Plus de 50% suspect
                logger.warning(f"‚ö†Ô∏è Changement 24h suspect: {data['change_24h']:.1f}%")
                return False
            
            # V√©rifier RSI dans plage valide
            if data['rsi'] < 0 or data['rsi'] > 100:
                logger.warning(f"‚ö†Ô∏è RSI invalide: {data['rsi']}")
                return False
            
            # V√©rifier volume positif
            if data['volume'] <= 0:
                logger.warning(f"‚ö†Ô∏è Volume invalide: {data['volume']}")
                return False
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur validation: {e}")
            return False
    
    def _get_fallback_data(self, symbol: str) -> Dict:
        """Donn√©es de fallback si tout √©choue"""
        logger.warning(f"üö® Utilisation fallback pour {symbol}")
        return {
            'symbol': symbol,
            'price': 100.0,
            'volume': 1000000,
            'change_24h': 0.0,
            'rsi': 50.0,
            'sma_20': 100.0,
            'sma_50': 100.0,
            'macd': 0.0,
            'source': 'fallback'
        }
    
    def get_multiple_symbols_data(self, symbols: list) -> Dict[str, Dict]:
        """R√©cup√©rer donn√©es pour plusieurs symboles"""
        results = {}
        for symbol in symbols:
            try:
                data = self.get_real_market_data(symbol)
                if data:
                    results[symbol] = data
                else:
                    logger.warning(f"‚ö†Ô∏è Impossible r√©cup√©rer donn√©es {symbol}")
            except Exception as e:
                logger.error(f"‚ùå Erreur symbole {symbol}: {e}")
        
        return results

def main():
    """Test du calculateur d'indicateurs r√©els"""
    print("üöÄ TEST REAL INDICATORS CALCULATOR")
    print("="*50)
    
    calculator = RealIndicatorsCalculator()
    
    # Test avec AAPL
    print("\nüìä Test AAPL...")
    aapl_data = calculator.get_real_market_data('AAPL')
    if aapl_data:
        print(f"‚úÖ Prix: ${aapl_data['price']:.2f}")
        print(f"‚úÖ RSI: {aapl_data['rsi']:.1f}")
        print(f"‚úÖ MACD: {aapl_data['macd']:.4f}")
        print(f"‚úÖ Source: {aapl_data['source']}")
    
    # Test avec MSFT
    print("\nüìä Test MSFT...")
    msft_data = calculator.get_real_market_data('MSFT')
    if msft_data:
        print(f"‚úÖ Prix: ${msft_data['price']:.2f}")
        print(f"‚úÖ RSI: {msft_data['rsi']:.1f}")
        print(f"‚úÖ MACD: {msft_data['macd']:.4f}")
        print(f"‚úÖ Source: {msft_data['source']}")
    
    print("\nüéØ Calculateur d'indicateurs r√©els test√© avec succ√®s!")

if __name__ == "__main__":
    main()
