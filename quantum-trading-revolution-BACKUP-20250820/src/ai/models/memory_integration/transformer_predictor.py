"""
üöÄ TRANSFORMER PREDICTOR - PR√âDICTION DE PRIX AVANC√âE CORRIG√âE
‚úÖ Mod√®le Transformer basique pour pr√©diction temporelle
‚úÖ CORRECTION CRITIQUE: Pr√©dictions r√©alistes (pas de $5.7 trillions!)
‚úÖ Validation des prix avec limite ¬±20%
üéØ Objectif: +20-30% pr√©cision des signaux trading
"""

import torch
import torch.nn as nn
from torch.utils.data import Dataset, DataLoader
import pandas as pd
import numpy as np
import logging
import math
from typing import Optional, Dict, Tuple
from sklearn.preprocessing import MinMaxScaler

# Configuration du logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - [%(name)s] %(message)s')
logger = logging.getLogger("TRANSFORMER_PREDICTOR")

class PositionalEncoding(nn.Module):
    """Encodage positionnel pour Transformer"""
    
    def __init__(self, d_model: int, max_len: int = 5000):
        super().__init__()
        
        pe = torch.zeros(max_len, d_model)
        position = torch.arange(0, max_len).unsqueeze(1).float()
        div_term = torch.exp(torch.arange(0, d_model, 2).float() * -(math.log(10000.0) / d_model))
        
        pe[:, 0::2] = torch.sin(position * div_term)
        pe[:, 1::2] = torch.cos(position * div_term)
        
        self.register_buffer('pe', pe.unsqueeze(0))
    
    def forward(self, x):
        return x + self.pe[:, :x.size(1)]

class TimeSeriesTransformer(nn.Module):
    """Mod√®le Transformer pour s√©ries temporelles"""
    
    def __init__(self, input_dim: int, model_dim: int = 64, num_heads: int = 8, num_layers: int = 3):
        super().__init__()
        
        self.input_projection = nn.Linear(input_dim, model_dim)
        self.positional_encoding = PositionalEncoding(model_dim)
        
        encoder_layer = nn.TransformerEncoderLayer(
            d_model=model_dim,
            nhead=num_heads,
            dim_feedforward=256,
            dropout=0.1
        )
        
        self.transformer = nn.TransformerEncoder(encoder_layer, num_layers=num_layers)
        self.output_projection = nn.Linear(model_dim, 1)
    
    def forward(self, x):
        # x shape: (batch_size, seq_len, input_dim)
        x = self.input_projection(x)
        x = self.positional_encoding(x)
        
        # Transformer expects (seq_len, batch_size, model_dim)
        x = x.transpose(0, 1)
        x = self.transformer(x)
        x = x.transpose(0, 1)
        
        # Prendre la derni√®re pr√©diction
        prediction = self.output_projection(x[:, -1, :])
        return prediction

class PricePredictor:
    """Pr√©dicteur de prix avec Transformer corrig√©"""
    
    def __init__(self, sequence_length: int = 60):
        self.sequence_length = sequence_length
        self.model = None
        self.scaler = MinMaxScaler()
        self.device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
        self.feature_names = ['open', 'high', 'low', 'close', 'volume', 'rsi', 'macd']
        
        logger.info(f"üöÄ PricePredictor initialis√© (sequence_length={sequence_length})")
        logger.info(f"   Device: {self.device}")
    
    def prepare_data(self, df: pd.DataFrame) -> Tuple[np.ndarray, np.ndarray]:
        """Pr√©parer donn√©es pour entra√Ænement"""
        try:
            # Features: OHLCV + indicateurs techniques
            features = self.feature_names
            data = df[features].values
            
            # Normaliser les donn√©es
            scaled_data = self.scaler.fit_transform(data)
            
            # Cr√©er s√©quences
            X, y = [], []
            for i in range(self.sequence_length, len(scaled_data)):
                X.append(scaled_data[i-self.sequence_length:i])
                y.append(scaled_data[i, 3])  # Prix de cl√¥ture
            
            X = np.array(X)
            y = np.array(y)
            
            logger.info(f"üìä Donn√©es pr√©par√©es: X={X.shape}, y={y.shape}")
            return X, y
            
        except Exception as e:
            logger.error(f"‚ùå Erreur pr√©paration donn√©es: {e}")
            raise
    
    def train_model(self, df: pd.DataFrame, epochs: int = 100):
        """Entra√Æner le mod√®le Transformer"""
        try:
            logger.info(f"ü§ñ Entra√Ænement du mod√®le Transformer ({epochs} epochs)...")
            
            X, y = self.prepare_data(df)
            
            # Cr√©er le mod√®le
            input_dim = X.shape[2]
            self.model = TimeSeriesTransformer(input_dim).to(self.device)
            
            # Pr√©parer DataLoader
            dataset = torch.utils.data.TensorDataset(
                torch.FloatTensor(X), 
                torch.FloatTensor(y)
            )
            dataloader = DataLoader(dataset, batch_size=32, shuffle=True)
            
            # Entra√Ænement
            optimizer = torch.optim.Adam(self.model.parameters(), lr=0.001)
            criterion = nn.MSELoss()
            
            self.model.train()
            for epoch in range(epochs):
                total_loss = 0
                for batch_X, batch_y in dataloader:
                    batch_X, batch_y = batch_X.to(self.device), batch_y.to(self.device)
                    
                    optimizer.zero_grad()
                    predictions = self.model(batch_X).squeeze()
                    loss = criterion(predictions, batch_y)
                    loss.backward()
                    optimizer.step()
                    
                    total_loss += loss.item()
                
                if epoch % 20 == 0:
                    logger.info(f"   Epoch {epoch}, Loss: {total_loss:.4f}")
            
            logger.info("‚úÖ Mod√®le Transformer entra√Æn√© avec succ√®s")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur entra√Ænement: {e}")
            raise
    
    def predict_next_price(self, recent_data: pd.DataFrame) -> Optional[float]:
        """
        CORRIGER LA D√â-NORMALISATION POUR √âVITER PRIX ABERRANTS
        
        Probl√®me actuel : dummy array avec zeros partout sauf position 3
        Solution : Utiliser vraie donn√©e r√©cente comme base
        """
        
        if self.model is None:
            logger.warning("‚ö†Ô∏è Mod√®le non entra√Æn√©")
            return None

        try:
            # V√©rifier donn√©es suffisantes
            if len(recent_data) < self.sequence_length:
                logger.warning(f"‚ö†Ô∏è Donn√©es insuffisantes: {len(recent_data)} < {self.sequence_length}")
                return None

            # Pr√©parer les donn√©es r√©centes
            features = self.feature_names
            data = recent_data[features].tail(self.sequence_length).values
            
            # Normaliser les donn√©es
            scaled_data = self.scaler.transform(data)
            
            # Pr√©diction
            self.model.eval()
            with torch.no_grad():
                x = torch.FloatTensor(scaled_data).unsqueeze(0).to(self.device)
                prediction = self.model(x).cpu().numpy()[0]
            
            # CORRECTION CRITIQUE : D√©-normalisation correcte
            # Utiliser les vraies donn√©es r√©centes comme base au lieu de zeros
            current_data = recent_data[features].iloc[-1].values.copy()
            
            # Remplacer seulement le prix de cl√¥ture par la pr√©diction
            current_data[3] = prediction  # Position du prix de cl√¥ture
            
            # D√©-normaliser avec les vraies donn√©es comme base
            denormalized = self.scaler.inverse_transform(current_data.reshape(1, -1))
            predicted_price = denormalized[0, 3]
            
            # VALIDATION CRITIQUE : V√©rifier que la pr√©diction est r√©aliste
            current_price = recent_data['close'].iloc[-1]
            max_change = 0.20  # 20% maximum de changement
            
            if not self._validate_prediction(predicted_price, current_price, max_change):
                logger.warning(f"‚ö†Ô∏è Pr√©diction irr√©aliste: {predicted_price:.2f} vs {current_price:.2f}")
                # Limiter le changement √† +/- 20%
                if predicted_price > current_price * (1 + max_change):
                    predicted_price = current_price * (1 + max_change)
                elif predicted_price < current_price * (1 - max_change):
                    predicted_price = current_price * (1 - max_change)
                
                logger.info(f"‚úÖ Pr√©diction corrig√©e: ${predicted_price:.2f} (limite ¬±{max_change:.0%})")
            
            return float(predicted_price)
            
        except Exception as e:
            logger.error(f"‚ùå Erreur pr√©diction: {e}")
            return None
    
    def _validate_prediction(self, predicted_price: float, current_price: float, max_change: float = 0.20) -> bool:
        """Valider que la pr√©diction est r√©aliste"""
        if predicted_price <= 0:
            return False
        
        # V√©rifier que le changement n'est pas trop extr√™me
        price_change = abs(predicted_price - current_price) / current_price
        if price_change > max_change:
            return False
        
        # V√©rifier que le prix n'est pas compl√®tement aberrant
        if predicted_price > current_price * 10 or predicted_price < current_price * 0.1:
            return False
            
        return True
    
    def evaluate_model(self, test_data: pd.DataFrame) -> Dict[str, float]:
        """√âvaluer les performances du mod√®le"""
        try:
            if self.model is None:
                return {'error': 'Mod√®le non entra√Æn√©'}
            
            X, y_true = self.prepare_data(test_data)
            
            self.model.eval()
            with torch.no_grad():
                X_tensor = torch.FloatTensor(X).to(self.device)
                y_pred = self.model(X_tensor).cpu().numpy().squeeze()
            
            # Calculer m√©triques
            mse = np.mean((y_pred - y_true) ** 2)
            mae = np.mean(np.abs(y_pred - y_true))
            rmse = np.sqrt(mse)
            
            # Calculer accuracy (pr√©dictions dans ¬±5% du vrai prix)
            accuracy = np.mean(np.abs(y_pred - y_true) / y_true < 0.05)
            
            metrics = {
                'mse': float(mse),
                'mae': float(mae),
                'rmse': float(rmse),
                'accuracy_5pct': float(accuracy)
            }
            
            logger.info(f"üìä √âvaluation mod√®le: RMSE={rmse:.4f}, Accuracy ¬±5%={accuracy:.1%}")
            return metrics
            
        except Exception as e:
            logger.error(f"‚ùå Erreur √©valuation: {e}")
            return {'error': str(e)}

def main():
    """Test du pr√©dicteur de prix corrig√©"""
    print("üöÄ TEST TRANSFORMER PREDICTOR CORRIG√â")
    print("="*50)
    
    try:
        # Cr√©er donn√©es de test
        dates = pd.date_range(start='2023-01-01', end='2024-01-01', freq='D')
        test_data = pd.DataFrame({
            'open': np.random.uniform(95, 105, len(dates)),
            'high': np.random.uniform(100, 110, len(dates)),
            'low': np.random.uniform(90, 100, len(dates)),
            'close': np.random.uniform(95, 105, len(dates)),
            'volume': np.random.uniform(900000, 1100000, len(dates)),
            'rsi': np.random.uniform(30, 70, len(dates)),
            'macd': np.random.uniform(-2, 2, len(dates))
        }, index=dates)
        
        # Cr√©er pr√©dicteur
        predictor = PricePredictor(sequence_length=30)
        
        # Entra√Æner mod√®le
        predictor.train_model(test_data, epochs=20)
        
        # Tester pr√©diction
        recent_data = test_data.tail(60)
        predicted_price = predictor.predict_next_price(recent_data)
        
        if predicted_price is not None:
            current_price = recent_data['close'].iloc[-1]
            change = (predicted_price - current_price) / current_price * 100
            
            print(f"‚úÖ Prix actuel: ${current_price:.2f}")
            print(f"üîÆ Prix pr√©dit: ${predicted_price:.2f}")
            print(f"üìà Changement: {change:+.2f}%")
            
            # V√©rifier que la pr√©diction est r√©aliste
            if abs(change) <= 20:
                print("‚úÖ Pr√©diction r√©aliste (dans la limite ¬±20%)")
            else:
                print("‚ùå Pr√©diction trop extr√™me")
        
        # √âvaluer mod√®le
        metrics = predictor.evaluate_model(test_data.tail(100))
        print(f"üìä M√©triques: {metrics}")
        
        print("\nüéØ Transformer Predictor corrig√© test√© avec succ√®s!")
        
    except Exception as e:
        print(f"‚ùå Test √©chou√©: {e}")

if __name__ == "__main__":
    main()



