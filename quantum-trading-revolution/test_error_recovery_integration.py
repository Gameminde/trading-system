#!/usr/bin/env python3
"""
üß™ TEST D'INT√âGRATION : SYST√àME DE R√âCUP√âRATION D'ERREURS
üéØ Valider l'int√©gration compl√®te du gestionnaire de r√©cup√©ration avec l'agent principal
"""

import sys
import os
import unittest
import logging
from unittest.mock import Mock, patch

# Ajouter le r√©pertoire parent au path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Configuration logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class TestErrorRecoveryIntegration(unittest.TestCase):
    """Test d'int√©gration du syst√®me de r√©cup√©ration d'erreurs"""
    
    def setUp(self):
        """Configuration initiale des tests"""
        logger.info("üß™ Configuration test d'int√©gration r√©cup√©ration d'erreurs")
        
        # Mock des modules externes si n√©cessaire
        self.mock_modules = {}
        
    def test_import_error_recovery_manager(self):
        """Test import du gestionnaire de r√©cup√©ration"""
        try:
            from error_recovery import ErrorRecoveryManager
            logger.info("‚úÖ Import ErrorRecoveryManager r√©ussi")
            self.assertTrue(True)
        except ImportError as e:
            logger.error(f"‚ùå Import ErrorRecoveryManager √©chou√©: {e}")
            self.fail(f"Import √©chou√©: {e}")
    
    def test_import_trading_exceptions(self):
        """Test import des exceptions de trading"""
        try:
            from trading_exceptions import (
                TradingError, InsufficientCapitalError, StaleMarketDataError,
                ExcessiveRiskError, MemoryDecodingError, MemoryCapacityError
            )
            logger.info("‚úÖ Import exceptions trading r√©ussi")
            self.assertTrue(True)
        except ImportError as e:
            logger.error(f"‚ùå Import exceptions trading √©chou√©: {e}")
            self.fail(f"Import √©chou√©: {e}")
    
    def test_error_recovery_manager_creation(self):
        """Test cr√©ation d'une instance du gestionnaire de r√©cup√©ration"""
        try:
            from error_recovery import ErrorRecoveryManager
            
            # Cr√©er une config mock
            mock_config = Mock()
            mock_config.memory_size = 1000
            
            # Cr√©er l'instance
            recovery_manager = ErrorRecoveryManager(mock_config)
            
            # V√©rifier les attributs
            self.assertIsNotNone(recovery_manager)
            self.assertEqual(recovery_manager.max_recovery_attempts, 3)
            self.assertIsInstance(recovery_manager.recovery_attempts, dict)
            self.assertIsInstance(recovery_manager.recovery_success_rate, dict)
            self.assertIsInstance(recovery_manager.recovery_history, list)
            
            logger.info("‚úÖ Cr√©ation ErrorRecoveryManager r√©ussie")
            
        except Exception as e:
            logger.error(f"‚ùå Cr√©ation ErrorRecoveryManager √©chou√©e: {e}")
            self.fail(f"Cr√©ation √©chou√©e: {e}")
    
    def test_insufficient_capital_recovery_strategy(self):
        """Test strat√©gie de r√©cup√©ration pour capital insuffisant"""
        try:
            from error_recovery import ErrorRecoveryManager
            from trading_exceptions import InsufficientCapitalError
            
            # Cr√©er le gestionnaire
            mock_config = Mock()
            recovery_manager = ErrorRecoveryManager(mock_config)
            
            # Cr√©er une erreur de capital insuffisant
            capital_error = InsufficientCapitalError(
                required=2000.0,
                available=1000.0,
                symbol="AAPL",
                action="BUY"
            )
            
            # Obtenir strat√©gie de r√©cup√©ration
            recovery_plan = recovery_manager.handle_insufficient_capital(capital_error)
            
            # V√©rifier la structure
            self.assertIn('error_type', recovery_plan)
            self.assertIn('recovery_strategies', recovery_plan)
            self.assertIn('recommended_strategy', recovery_plan)
            self.assertEqual(recovery_plan['error_type'], 'INSUFFICIENT_CAPITAL')
            self.assertGreater(len(recovery_plan['recovery_strategies']), 0)
            
            logger.info("‚úÖ Strat√©gie r√©cup√©ration capital insuffisant valid√©e")
            
        except Exception as e:
            logger.error(f"‚ùå Test strat√©gie capital insuffisant √©chou√©: {e}")
            self.fail(f"Test √©chou√©: {e}")
    
    def test_stale_market_data_recovery_strategy(self):
        """Test strat√©gie de r√©cup√©ration pour donn√©es obsol√®tes"""
        try:
            from error_recovery import ErrorRecoveryManager
            from trading_exceptions import StaleMarketDataError
            
            # Cr√©er le gestionnaire
            mock_config = Mock()
            recovery_manager = ErrorRecoveryManager(mock_config)
            
            # Cr√©er une erreur de donn√©es obsol√®tes
            stale_error = StaleMarketDataError(
                data_age_seconds=600,  # 10 minutes
                max_age_seconds=300,   # 5 minutes
                symbol="AAPL"
            )
            
            # Obtenir strat√©gie de r√©cup√©ration
            recovery_plan = recovery_manager.handle_stale_market_data(stale_error)
            
            # V√©rifier la structure
            self.assertIn('error_type', recovery_plan)
            self.assertIn('recovery_strategies', recovery_plan)
            self.assertEqual(recovery_plan['error_type'], 'STALE_MARKET_DATA')
            self.assertGreater(len(recovery_plan['recovery_strategies']), 0)
            
            logger.info("‚úÖ Strat√©gie r√©cup√©ration donn√©es obsol√®tes valid√©e")
            
        except Exception as e:
            logger.error(f"‚ùå Test strat√©gie donn√©es obsol√®tes √©chou√©: {e}")
            self.fail(f"Test √©chou√©: {e}")
    
    def test_excessive_risk_recovery_strategy(self):
        """Test strat√©gie de r√©cup√©ration pour risque excessif"""
        try:
            from error_recovery import ErrorRecoveryManager
            from trading_exceptions import ExcessiveRiskError
            
            # Cr√©er le gestionnaire
            mock_config = Mock()
            recovery_manager = ErrorRecoveryManager(mock_config)
            
            # Cr√©er une erreur de risque excessif
            risk_error = ExcessiveRiskError(
                risk_score=0.85,
                max_allowed=0.5,
                risk_factors=["volatilit√© √©lev√©e", "concentration excessive"],
                portfolio_value=50000.0
            )
            
            # Obtenir strat√©gie de r√©cup√©ration
            recovery_plan = recovery_manager.handle_excessive_risk(risk_error)
            
            # V√©rifier la structure
            self.assertIn('error_type', recovery_plan)
            self.assertIn('recovery_strategies', recovery_plan)
            self.assertEqual(recovery_plan['error_type'], 'EXCESSIVE_RISK')
            self.assertGreater(len(recovery_plan['recovery_strategies']), 0)
            
            logger.info("‚úÖ Strat√©gie r√©cup√©ration risque excessif valid√©e")
            
        except Exception as e:
            logger.error(f"‚ùå Test strat√©gie risque excessif √©chou√©: {e}")
            self.fail(f"Test √©chou√©: {e}")
    
    def test_memory_decoding_recovery_strategy(self):
        """Test strat√©gie de r√©cup√©ration pour erreur de d√©codage m√©moire"""
        try:
            from error_recovery import ErrorRecoveryManager
            from trading_exceptions import MemoryDecodingError
            
            # Cr√©er le gestionnaire
            mock_config = Mock()
            recovery_manager = ErrorRecoveryManager(mock_config)
            
            # Cr√©er une erreur de d√©codage m√©moire
            memory_error = MemoryDecodingError(
                operation="context_encoding",
                memory_size=500,
                error_details="Invalid context format",
                input_data={"price": 100.0, "rsi": 50.0}
            )
            
            # Obtenir strat√©gie de r√©cup√©ration
            recovery_plan = recovery_manager.handle_memory_decoding_error(memory_error)
            
            # V√©rifier la structure
            self.assertIn('error_type', recovery_plan)
            self.assertIn('recovery_strategies', recovery_plan)
            self.assertEqual(recovery_plan['error_type'], 'MEMORY_DECODING_ERROR')
            self.assertGreater(len(recovery_plan['recovery_strategies']), 0)
            
            logger.info("‚úÖ Strat√©gie r√©cup√©ration d√©codage m√©moire valid√©e")
            
        except Exception as e:
            logger.error(f"‚ùå Test strat√©gie d√©codage m√©moire √©chou√©: {e}")
            self.fail(f"Test √©chou√©: {e}")
    
    def test_memory_capacity_recovery_strategy(self):
        """Test strat√©gie de r√©cup√©ration pour erreur de capacit√© m√©moire"""
        try:
            from error_recovery import ErrorRecoveryManager
            from trading_exceptions import MemoryCapacityError
            
            # Cr√©er le gestionnaire
            mock_config = Mock()
            recovery_manager = ErrorRecoveryManager(mock_config)
            
            # Cr√©er une erreur de capacit√© m√©moire
            capacity_error = MemoryCapacityError(
                current_size=950,
                max_capacity=1000,
                operation="store_experience"
            )
            
            # Obtenir strat√©gie de r√©cup√©ration
            recovery_plan = recovery_manager.handle_memory_capacity_error(capacity_error)
            
            # V√©rifier la structure
            self.assertIn('error_type', recovery_plan)
            self.assertIn('recovery_strategies', recovery_plan)
            self.assertEqual(recovery_plan['error_type'], 'MEMORY_CAPACITY_ERROR')
            self.assertGreater(len(recovery_plan['recovery_strategies']), 0)
            
            logger.info("‚úÖ Strat√©gie r√©cup√©ration capacit√© m√©moire valid√©e")
            
        except Exception as e:
            logger.error(f"‚ùå Test strat√©gie capacit√© m√©moire √©chou√©: {e}")
            self.fail(f"Test √©chou√©: {e}")
    
    def test_generic_error_recovery_strategy(self):
        """Test strat√©gie de r√©cup√©ration pour erreur g√©n√©rique"""
        try:
            from error_recovery import ErrorRecoveryManager
            from trading_exceptions import TradingError
            
            # Cr√©er le gestionnaire
            mock_config = Mock()
            recovery_manager = ErrorRecoveryManager(mock_config)
            
            # Cr√©er une erreur g√©n√©rique
            generic_error = TradingError(
                message="Erreur syst√®me inattendue",
                error_code="SYSTEM_ERROR",
                context={"component": "fusion_layer"},
                severity="ERROR"
            )
            
            # Obtenir strat√©gie de r√©cup√©ration
            recovery_plan = recovery_manager.handle_generic_error(generic_error)
            
            # V√©rifier la structure
            self.assertIn('error_type', recovery_plan)
            self.assertIn('recovery_strategies', recovery_plan)
            self.assertEqual(recovery_plan['error_type'], 'GENERIC_ERROR')
            self.assertGreater(len(recovery_plan['recovery_strategies']), 0)
            
            logger.info("‚úÖ Strat√©gie r√©cup√©ration erreur g√©n√©rique valid√©e")
            
        except Exception as e:
            logger.error(f"‚ùå Test strat√©gie erreur g√©n√©rique √©chou√©: {e}")
            self.fail(f"Test √©chou√©: {e}")
    
    def test_recovery_strategy_execution(self):
        """Test ex√©cution d'une strat√©gie de r√©cup√©ration"""
        try:
            from error_recovery import ErrorRecoveryManager
            from trading_exceptions import TradingError
            
            # Cr√©er le gestionnaire
            mock_config = Mock()
            recovery_manager = ErrorRecoveryManager(mock_config)
            
            # Cr√©er une erreur
            error = TradingError("Test error")
            
            # Cr√©er une strat√©gie
            strategy = {
                'strategy': 'test_strategy',
                'action': 'Test action',
                'confidence': 0.8,
                'risk_level': 'LOW'
            }
            
            # Ex√©cuter la strat√©gie
            result = recovery_manager.execute_recovery_strategy(error, strategy)
            
            # V√©rifier la structure du r√©sultat
            self.assertIn('strategy_executed', result)
            self.assertIn('success', result)
            self.assertIn('recovery_time_seconds', result)
            self.assertEqual(result['strategy_executed'], 'test_strategy')
            
            logger.info("‚úÖ Ex√©cution strat√©gie de r√©cup√©ration valid√©e")
            
        except Exception as e:
            logger.error(f"‚ùå Test ex√©cution strat√©gie √©chou√©: {e}")
            self.fail(f"Test √©chou√©: {e}")
    
    def test_recovery_statistics(self):
        """Test obtention des statistiques de r√©cup√©ration"""
        try:
            from error_recovery import ErrorRecoveryManager
            from trading_exceptions import TradingError
            
            # Cr√©er le gestionnaire
            mock_config = Mock()
            recovery_manager = ErrorRecoveryManager(mock_config)
            
            # Ex√©cuter quelques strat√©gies pour g√©n√©rer des statistiques
            error = TradingError("Test error")
            strategy = {'strategy': 'test_strategy', 'action': 'Test', 'confidence': 0.8, 'risk_level': 'LOW'}
            
            recovery_manager.execute_recovery_strategy(error, strategy)
            
            # Obtenir les statistiques
            stats = recovery_manager.get_recovery_statistics()
            
            # V√©rifier la structure
            self.assertIn('total_recovery_attempts', stats)
            self.assertIn('successful_recoveries', stats)
            self.assertIn('overall_success_rate', stats)
            self.assertIn('strategy_success_rates', stats)
            self.assertIn('recent_recoveries', stats)
            
            # V√©rifier les valeurs
            self.assertGreaterEqual(stats['total_recovery_attempts'], 1)
            self.assertGreaterEqual(stats['overall_success_rate'], 0.0)
            self.assertLessEqual(stats['overall_success_rate'], 1.0)
            
            logger.info("‚úÖ Statistiques de r√©cup√©ration valid√©es")
            
        except Exception as e:
            logger.error(f"‚ùå Test statistiques r√©cup√©ration √©chou√©: {e}")
            self.fail(f"Test √©chou√©: {e}")
    
    def test_recommended_strategy_selection(self):
        """Test s√©lection automatique de la strat√©gie recommand√©e"""
        try:
            from error_recovery import ErrorRecoveryManager
            from trading_exceptions import InsufficientCapitalError
            
            # Cr√©er le gestionnaire
            mock_config = Mock()
            recovery_manager = ErrorRecoveryManager(mock_config)
            
            # Cr√©er une erreur
            error = InsufficientCapitalError(
                required=2000.0,
                available=1000.0,
                symbol="AAPL",
                action="BUY"
            )
            
            # Obtenir la strat√©gie recommand√©e
            recommended = recovery_manager.get_recommended_strategy(error)
            
            # V√©rifier que c'est la bonne strat√©gie
            self.assertEqual(recommended['error_type'], 'INSUFFICIENT_CAPITAL')
            self.assertIn('recommended_strategy', recommended)
            
            logger.info("‚úÖ S√©lection automatique strat√©gie recommand√©e valid√©e")
            
        except Exception as e:
            logger.error(f"‚ùå Test s√©lection strat√©gie recommand√©e √©chou√©: {e}")
            self.fail(f"Test √©chou√©: {e}")

def run_integration_tests():
    """Ex√©cuter tous les tests d'int√©gration"""
    logger.info("üöÄ D√âMARRAGE TESTS D'INT√âGRATION - SYST√àME DE R√âCUP√âRATION D'ERREURS")
    
    # Cr√©er la suite de tests
    test_suite = unittest.TestLoader().loadTestsFromTestCase(TestErrorRecoveryIntegration)
    
    # Ex√©cuter les tests
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(test_suite)
    
    # R√©sum√© des r√©sultats
    logger.info("="*80)
    logger.info("üìä R√âSULTATS TESTS D'INT√âGRATION")
    logger.info("="*80)
    logger.info(f"Tests ex√©cut√©s: {result.testsRun}")
    logger.info(f"√âchecs: {len(result.failures)}")
    logger.info(f"Erreurs: {len(result.errors)}")
    
    if result.failures:
        logger.error("‚ùå √âCHECS D√âTECT√âS:")
        for test, traceback in result.failures:
            logger.error(f"  - {test}: {traceback}")
    
    if result.errors:
        logger.error("‚ùå ERREURS D√âTECT√âES:")
        for test, traceback in result.errors:
            logger.error(f"  - {test}: {traceback}")
    
    if result.wasSuccessful():
        logger.info("‚úÖ TOUS LES TESTS D'INT√âGRATION ONT R√âUSSI!")
        logger.info("üéØ Le syst√®me de r√©cup√©ration d'erreurs est parfaitement int√©gr√©!")
    else:
        logger.error("‚ùå CERTAINS TESTS D'INT√âGRATION ONT √âCHOU√â!")
        logger.error("üîß V√©rifiez les erreurs ci-dessus et corrigez-les")
    
    return result.wasSuccessful()

if __name__ == "__main__":
    # Ex√©cuter les tests
    success = run_integration_tests()
    
    # Code de sortie appropri√©
    sys.exit(0 if success else 1)
