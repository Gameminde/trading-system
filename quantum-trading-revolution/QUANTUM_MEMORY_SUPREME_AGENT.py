"""
üöÄ QUANTUM MEMORY SUPREME AGENT - AGENT SUPR√äME UNIFI√â
üéØ COMBINE TOUTES LES TECHNOLOGIES R√âVOLUTIONNAIRES
‚öõÔ∏è Quantum Computing + üß† Memory Decoder + ü§ñ PPO + üìä MPS + üí∞ Capital R√©aliste

MISSION: Cr√©er l'AGENT DE TRADING LE PLUS AVANC√â AU MONDE
ARCHITECTURE: 5 LAYERS UNIFI√âS + SYNERGIE MAXIMALE
R√âSULTAT: MA√éTRISE EN 6 MOIS + 29x MULTIPLICATEUR DOCUMENT√â

üíé L'AGENT PARFAIT - PUISSANCE + INTELLIGENCE + R√âALISME !
"""

import os
import sys
import json
import logging
import numpy as np
import pandas as pd
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass, asdict
import threading
from concurrent.futures import ThreadPoolExecutor
import asyncio
import time
import random

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - [%(name)s] %(message)s'
)
logger = logging.getLogger("QUANTUM_MEMORY_SUPREME")

# Import modules int√©gr√©s (chemins paquet `src/...`)
try:
    from src.ai.models.transformer_predictor import PricePredictor
except ImportError:
    PricePredictor = None  # Fallback si indisponible

try:
    from src.trading.algorithms.real_indicators_calculator import RealIndicatorsCalculator
except ImportError:
    RealIndicatorsCalculator = None  # Fallback si indisponible

try:
    from model_monitoring_system import ModelMonitoringSystem
except ImportError:
    ModelMonitoringSystem = None  # Fallback si indisponible

try:
    from validators import TradingValidators
except ImportError:
    TradingValidators = None  # Fallback si indisponible

try:
    from trading_constants import TradingConstants, TradingActions
except ImportError:
    TradingConstants = None  # Fallback si indisponible

# Import syst√®me d'exceptions granulaires
try:
    from trading_exceptions import (
        TradingError, InsufficientCapitalError, QuantumOptimizationError,
        StaleMarketDataError, ExcessiveRiskError, DecisionFusionError,
        MemoryDecodingError, MemoryCapacityError, RiskAssessmentError,
        TradeExecutionError, MarketDataError, ConfigurationError
    )
    from error_recovery import ErrorRecoveryManager
    EXCEPTIONS_AVAILABLE = True
except ImportError:
    # Fallback si module exceptions non disponible
    EXCEPTIONS_AVAILABLE = False
    logger.warning("‚ö†Ô∏è Module d'exceptions granulaires non disponible - utilisation mode fallback")
    TradingActions = None  # Fallback si indisponible

@dataclass
class SupremeConfig:
    """Configuration AGENT SUPR√äME - Toutes technologies unifi√©es"""
    
    # LAYER 1: QUANTUM COMPUTING (Acc√©l√©ration)
    quantum_boost_factor: float = TradingConstants.QUANTUM_BOOST_FACTOR if TradingConstants else 0.8
    mps_weight_minimum: float = TradingConstants.RISK_LOW_THRESHOLD if TradingConstants else 0.30
    quantum_weight_minimum: float = TradingConstants.RISK_MODERATE_THRESHOLD if TradingConstants else 0.40
    
    # LAYER 2: MEMORY DECODER (Intelligence)
    memory_size: int = TradingConstants.MEMORY_SIZE_DEFAULT if TradingConstants else 100000
    k_neighbors: int = TradingConstants.K_NEIGHBORS_DEFAULT if TradingConstants else 32
    memory_weight: float = TradingConstants.MEMORY_WEIGHT_DEFAULT if TradingConstants else 0.6
    
    # LAYER 3: TRADING CORE (Ex√©cution)
    initial_capital: float = 1000.0  # R√âALISME VALID√â
    max_positions: int = TradingConstants.MAX_POSITIONS_COUNT if TradingConstants else 4
    position_size_base: float = TradingConstants.POSITION_SIZE_BASE if TradingConstants else 0.25
    stop_loss: float = TradingConstants.STOP_LOSS_DEFAULT if TradingConstants else 0.03
    take_profit: float = TradingConstants.TAKE_PROFIT_DEFAULT if TradingConstants else 0.06
    
    # LAYER 4: RISK MANAGEMENT (S√©curit√©)
    max_drawdown_limit: float = TradingConstants.MAX_DRAWDOWN_LIMIT if TradingConstants else 0.15
    daily_loss_limit: float = TradingConstants.MAX_DAILY_LOSS_RATIO if TradingConstants else 0.05
    transaction_cost_threshold: float = TradingConstants.TRANSACTION_COST_THRESHOLD if TradingConstants else 0.004
    
    # LAYER 5: INTELLIGENCE FUSION (Synergie)
    fusion_buy_threshold: float = TradingConstants.MAJOR_PRICE_CHANGE if TradingConstants else 0.15
    fusion_sell_threshold: float = -TradingConstants.MAJOR_PRICE_CHANGE if TradingConstants else -0.15
    confidence_threshold: float = TradingConstants.MIN_CONFIDENCE_THRESHOLD if TradingConstants else 0.08
    
    # Modules int√©gr√©s
    predictor_sequence_length: int = TradingConstants.PREDICTOR_SEQUENCE_LENGTH if TradingConstants else 30
    predictor_train_epochs: int = TradingConstants.PREDICTOR_TRAIN_EPOCHS if TradingConstants else 5
    indicators_cache_seconds: int = TradingConstants.INDICATORS_CACHE_SECONDS if TradingConstants else 300

    # S√©curit√© d'ex√©cution
    max_steps_per_run: int = TradingConstants.MAX_STEPS_DEFAULT if TradingConstants else 300
    max_runtime_seconds: int = TradingConstants.MAX_RUNTIME_DEFAULT if TradingConstants else 45
    
    # Modules activ√©s
    use_quantum: bool = True
    use_memory_decoder: bool = True
    use_mps_optimization: bool = True
    use_llm_sentiment: bool = True
    use_advanced_ml: bool = True

class QuantumLayer:
    """LAYER 1: QUANTUM COMPUTING - Acc√©l√©ration r√©volutionnaire"""
    
    def __init__(self, config: SupremeConfig):
        self.config = config
        self.quantum_state = "OPTIMIZED"
        logger.info("‚öõÔ∏è LAYER QUANTUM - Initialisation acc√©l√©ration r√©volutionnaire")
    
    def quantum_optimize_portfolio(self, positions: List[Dict], market_data: pd.DataFrame) -> Dict:
        """Optimisation portfolio par inspiration quantique"""
        try:
            # Simulation optimisation quantique
            quantum_score = self._calculate_quantum_score(positions, market_data)
            
            # Application boost quantique
            optimized_positions = []
            for pos in positions:
                quantum_boost = 1 + (self.config.quantum_boost_factor * quantum_score)
                pos['quantum_boost'] = quantum_boost
                pos['optimized_size'] = pos['size'] * quantum_boost
                optimized_positions.append(pos)
            
            logger.info(f"‚öõÔ∏è Portfolio optimis√© quantiquement - Score: {quantum_score:.3f}")
            return {
                'positions': optimized_positions,
                'quantum_score': quantum_score,
                'total_boost': sum(p['quantum_boost'] for p in optimized_positions)
            }
            
        except (ValueError, TypeError) as e:
            if EXCEPTIONS_AVAILABLE:
                raise QuantumOptimizationError('parameter_validation', len(positions), None, str(e)) from e
            else:
                logger.error(f"‚ùå Erreur validation param√®tres quantiques: {e}")
                return {'positions': positions, 'quantum_score': 0.0, 'total_boost': 1.0}
        except ZeroDivisionError as e:
            if EXCEPTIONS_AVAILABLE:
                raise QuantumOptimizationError('division_by_zero', len(positions), 0.0, 'Total portfolio value is zero') from e
            else:
                logger.error(f"‚ùå Erreur division par z√©ro quantique: {e}")
                return {'positions': positions, 'quantum_score': 0.0, 'total_boost': 1.0}
        except KeyError as e:
            if EXCEPTIONS_AVAILABLE:
                raise QuantumOptimizationError('missing_data', len(positions), None, f'Missing position data: {str(e)}') from e
            else:
                logger.error(f"‚ùå Erreur donn√©es manquantes quantiques: {e}")
                return {'positions': positions, 'quantum_score': 0.0, 'total_boost': 1.0}
        except Exception as e:
            if EXCEPTIONS_AVAILABLE:
                logger.critical(f'üí• Erreur quantique inattendue: {e}')
                raise QuantumOptimizationError('unexpected_error', len(positions), None, str(e)) from e
            else:
                logger.error(f"‚ùå Erreur optimisation quantique: {e}")
                return {'positions': positions, 'quantum_score': 0.0, 'total_boost': 1.0}
    
    def _calculate_quantum_score(self, positions: List[Dict], market_data: pd.DataFrame) -> float:
        """Calculer score quantique bas√© sur coh√©rence positions"""
        if not positions:
            return 0.0
        
        # Analyse coh√©rence quantique des positions
        position_values = [p.get('value', 0) for p in positions]
        total_value = sum(position_values)
        
        if total_value == 0:
            return 0.0
        
        # Calculer entropie quantique (coh√©rence)
        normalized_values = [v/total_value for v in position_values]
        entropy = -sum(p * np.log2(p) if p > 0 else 0 for p in normalized_values)
        
        # Score quantique (0 = parfaitement coh√©rent, 1 = chaos total)
        max_entropy = np.log2(len(positions)) if len(positions) > 1 else 0
        quantum_score = 1 - (entropy / max_entropy) if max_entropy > 0 else 1.0
        
        return max(0.0, min(1.0, quantum_score))

class MemoryDecoderLayer:
    """LAYER 2: MEMORY DECODER - Intelligence persistante r√©volutionnaire"""
    
    def __init__(self, config: SupremeConfig):
        self.config = config
        self.memory_datastore = {
            'keys': [],
            'values': [],
            'metadata': []
        }
        self.experience_counter = 0
        logger.info("üß† LAYER MEMORY DECODER - Initialisation intelligence persistante")
    
    def store_experience(self, market_context: Dict, action: int, reward: float, 
                        outcome: Dict) -> None:
        """Stocker exp√©rience dans m√©moire persistante"""
        try:
            # Encoder contexte march√©
            context_vector = self._encode_market_context(market_context)
            
            # Cr√©er valeur enrichie
            experience_value = {
                'context': context_vector,
                'action': action,
                'reward': reward,
                'outcome': outcome,
                'timestamp': datetime.now().isoformat(),
                'success': reward > 0
            }
            
            # Ajouter √† datastore
            self.memory_datastore['keys'].append(context_vector)
            self.memory_datastore['values'].append(experience_value)
            self.memory_datastore['metadata'].append({
                'timestamp': experience_value['timestamp'],
                'reward': reward,
                'success': experience_value['success']
            })
            
            # Limiter taille m√©moire
            if len(self.memory_datastore['keys']) > self.config.memory_size:
                self.memory_datastore['keys'].pop(0)
                self.memory_datastore['values'].pop(0)
                self.memory_datastore['metadata'].pop(0)
            
            self.experience_counter += 1
            
            if self.experience_counter % 100 == 0:
                logger.info(f"üß† M√©moire enrichie: {self.experience_counter} exp√©riences stock√©es")
                
        except (KeyError, IndexError, AttributeError) as e:
            if EXCEPTIONS_AVAILABLE:
                raise MemoryDecodingError('context_encoding', len(self.memory_datastore['keys']), str(e), market_context) from e
            else:
                logger.error(f"‚ùå Erreur encodage contexte m√©moire: {e}")
        except MemoryError as e:
            if EXCEPTIONS_AVAILABLE:
                raise MemoryCapacityError(len(self.memory_datastore['keys']), self.config.memory_size, 'store_experience') from e
            else:
                logger.error(f"‚ùå Erreur capacit√© m√©moire: {e}")
        except (TypeError, ValueError) as e:
            if EXCEPTIONS_AVAILABLE:
                raise MemoryDecodingError('data_validation', len(self.memory_datastore['keys']), f'Invalid input: {str(e)}', {'action': action, 'reward': reward}) from e
            else:
                logger.error(f"‚ùå Erreur validation donn√©es m√©moire: {e}")
        except Exception as e:
            if EXCEPTIONS_AVAILABLE:
                logger.critical(f'üí• Erreur m√©moire inattendue: {e}')
                raise MemoryDecodingError('unexpected_error', len(self.memory_datastore['keys']), str(e)) from e
            else:
                logger.error(f"‚ùå Erreur stockage exp√©rience: {e}")
    
    def retrieve_similar_experiences(self, current_context: Dict, k: int = None) -> List[Dict]:
        """R√©cup√©rer exp√©riences similaires pour d√©cision intelligente"""
        try:
            k = k or self.config.k_neighbors
            
            if len(self.memory_datastore['keys']) == 0:
                return []
            
            # Encoder contexte actuel
            current_vector = self._encode_market_context(current_context)
            
            # Calculer similarit√©s
            similarities = []
            for i, key in enumerate(self.memory_datastore['keys']):
                similarity = self._calculate_similarity(current_vector, key)
                similarities.append((similarity, i))
            
            # Trier par similarit√© et r√©cup√©rer top-k
            similarities.sort(key=lambda x: x[0], reverse=True)
            top_k_indices = [idx for _, idx in similarities[:k]]
            
            # R√©cup√©rer exp√©riences
            similar_experiences = []
            for idx in top_k_indices:
                if idx < len(self.memory_datastore['values']):
                    similar_experiences.append(self.memory_datastore['values'][idx])
            
            logger.debug(f"üß† {len(similar_experiences)} exp√©riences similaires r√©cup√©r√©es")
            return similar_experiences
            
        except (KeyError, IndexError) as e:
            if EXCEPTIONS_AVAILABLE:
                raise MemoryDecodingError('index_access', len(self.memory_datastore['keys']), f'Index error: {str(e)}') from e
            else:
                logger.error(f"‚ùå Erreur acc√®s index m√©moire: {e}")
                return []
        except (TypeError, ValueError) as e:
            if EXCEPTIONS_AVAILABLE:
                raise MemoryDecodingError('similarity_calculation', len(self.memory_datastore['keys']), f'Similarity calculation error: {str(e)}') from e
            else:
                logger.error(f"‚ùå Erreur calcul similarit√©: {e}")
                return []
        except Exception as e:
            if EXCEPTIONS_AVAILABLE:
                logger.critical(f'üí• Erreur r√©cup√©ration m√©moire inattendue: {e}')
                raise MemoryDecodingError('unexpected_error', len(self.memory_datastore['keys']), str(e)) from e
            else:
                logger.error(f"‚ùå Erreur r√©cup√©ration exp√©riences: {e}")
                return []
    
    def _encode_market_context(self, context: Dict) -> np.ndarray:
        """Encoder contexte march√© en vecteur num√©rique"""
        # Encodage simple pour l'exemple
        features = [
            context.get('price', 100) / 100,  # Prix normalis√©
            context.get('rsi', 50) / 100,     # RSI normalis√©
            context.get('macd', 0) / 10,      # MACD normalis√©
            context.get('volume', 1000000) / 1000000,  # Volume normalis√©
            context.get('volatility', 0.02) / 0.1,     # Volatilit√© normalis√©e
        ]
        
        return np.array(features, dtype=np.float32)
    
    def _calculate_similarity(self, vec1: np.ndarray, vec2: np.ndarray) -> float:
        """Calculer similarit√© cosinus entre vecteurs"""
        try:
            dot_product = np.dot(vec1, vec2)
            norm1 = np.linalg.norm(vec1)
            norm2 = np.linalg.norm(vec2)
            
            if norm1 == 0 or norm2 == 0:
                return 0.0
            
            return dot_product / (norm1 * norm2)
        except:
            return 0.0

class TradingCoreLayer:
    """LAYER 3: TRADING CORE - Ex√©cution intelligente unifi√©e"""
    
    def __init__(self, config: SupremeConfig):
        self.config = config
        self.positions = []
        self.capital = config.initial_capital
        self.total_trades = 0
        self.winning_trades = 0
        self.portfolio_history = []
        
        logger.info(f"üí∞ LAYER TRADING CORE - Capital initial: ${self.capital:,.2f}")
    
    def execute_trade(self, action: str, symbol: str, quantity: float, 
                     price: float, context: Dict) -> Dict:
        """Ex√©cuter trade avec validation stricte des param√®tres"""
        try:
            # VALIDATION STRICTE AJOUT√âE
            if TradingValidators:
                TradingValidators.validate_trade_parameters(action, symbol, quantity, price, context)
            else:
                # Fallback validation basique si module non disponible
                if not action or action not in ['BUY', 'SELL', 'HOLD']:
                    raise ValueError(f'Action invalide: {action}')
                if not symbol or not isinstance(symbol, str):
                    raise ValueError(f'Symbol invalide: {symbol}')
                if not isinstance(quantity, (int, float)) or quantity <= 0:
                    raise ValueError(f'Quantit√© invalide: {quantity}')
                if not isinstance(price, (int, float)) or price <= 0:
                    raise ValueError(f'Prix invalide: {price}')
                if not isinstance(context, dict):
                    raise ValueError('Context doit √™tre un dictionnaire')
            
            trade_id = f"TRADE_{self.total_trades + 1}_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            
            # Calculer co√ªt transaction
            transaction_cost = quantity * price * self.config.transaction_cost_threshold
            
            # V√©rifier capital disponible
            if action == "BUY" and self.capital < (quantity * price + transaction_cost):
                logger.warning(f"‚ö†Ô∏è Capital insuffisant pour {action} {quantity} {symbol}")
                return {'success': False, 'reason': 'insufficient_capital'}
            
            # Ex√©cuter trade
            if action == "BUY":
                self.capital -= (quantity * price + transaction_cost)
                position = {
                    'id': trade_id,
                    'symbol': symbol,
                    'quantity': quantity,
                    'entry_price': price,
                    'entry_time': datetime.now(),
                    'context': context,
                    'transaction_cost': transaction_cost
                }
                self.positions.append(position)
                
            elif action == "SELL":
                # Trouver position correspondante
                position = next((p for p in self.positions if p['symbol'] == symbol), None)
                if position:
                    proceeds = quantity * price - transaction_cost
                    profit = proceeds - (quantity * position['entry_price'])
                    
                    self.capital += proceeds
                    self.total_trades += 1
                    
                    if profit > 0:
                        self.winning_trades += 1
                    
                    # Retirer position
                    self.positions.remove(position)
                    
                    logger.info(f"üí∞ {action} {quantity} {symbol} - P&L: ${profit:.2f}")
                    
                    return {
                        'success': True,
                        'trade_id': trade_id,
                        'profit': profit,
                        'proceeds': proceeds,
                        'transaction_cost': transaction_cost
                    }
                else:
                    return {'success': False, 'reason': 'no_position_to_sell'}
            
            # Mettre √† jour historique
            self._update_portfolio_history()
            
            logger.info(f"üí∞ {action} {quantity} {symbol} @ ${price:.2f} - Trade ID: {trade_id}")
            return {'success': True, 'trade_id': trade_id, 'transaction_cost': transaction_cost}
            
        except ValueError as e:
            # Check if it's capital insufficiency
            if 'Capital insuffisant' in str(e) or 'insufficient_capital' in str(e).lower():
                if EXCEPTIONS_AVAILABLE:
                    required = quantity * price + (quantity * price * self.config.transaction_cost_threshold)
                    raise InsufficientCapitalError(required, self.capital, symbol, action) from e
                else:
                    logger.error(f'‚ùå Capital insuffisant: {e}')
                    return {'success': False, 'error_type': 'insufficient_capital', 'reason': str(e)}
            else:
                logger.error(f'‚ùå Param√®tres invalides: {e}')
                return {'success': False, 'error_type': 'validation', 'reason': str(e)}
        except InsufficientCapitalError as e:
            if EXCEPTIONS_AVAILABLE and self.error_recovery:
                e.log_structured(logger)
                recovery_result = self.error_recovery.handle_insufficient_capital(e)
                return {'success': False, 'error_type': 'insufficient_capital', 'reason': str(e), 'context': e.context, 'recovery': recovery_result}
            else:
                logger.error(f'‚ùå Capital insuffisant: {e}')
                return {'success': False, 'error_type': 'insufficient_capital', 'reason': str(e)}
        except Exception as e:
            if EXCEPTIONS_AVAILABLE:
                logger.critical(f'üí• Erreur trade inattendue: {e}')
                trade_error = TradeExecutionError('UNKNOWN', action, symbol, quantity, price, 'unexpected', str(e))
                trade_error.log_structured(logger)
                return {'success': False, 'error_type': 'unexpected_error', 'reason': str(e)}
            else:
                logger.error(f"‚ùå Erreur ex√©cution trade: {e}")
                return {'success': False, 'reason': str(e)}
    
    def _update_portfolio_history(self):
        """Mettre √† jour historique portfolio"""
        total_value = self.capital
        for pos in self.positions:
            # Utiliser prix d'entr√©e pour l'instant (dans la vraie vie, prix actuel)
            total_value += pos['quantity'] * pos['entry_price']
        
        self.portfolio_history.append({
            'timestamp': datetime.now(),
            'capital': self.capital,
            'positions_value': total_value - self.capital,
            'total_value': total_value,
            'num_positions': len(self.positions)
        })

class RiskManagementLayer:
    """LAYER 4: RISK MANAGEMENT - S√©curit√© et protection intelligente"""
    
    def __init__(self, config: SupremeConfig):
        self.config = config
        self.risk_alerts = []
        self.daily_pnl = 0.0
        self.max_drawdown = 0.0
        self.peak_value = config.initial_capital
        
        logger.info("üõ°Ô∏è LAYER RISK MANAGEMENT - Protection intelligente activ√©e")
    
    def assess_risk(self, portfolio_value: float, positions: List[Dict], 
                   market_data: pd.DataFrame) -> Dict:
        """√âvaluer risque portfolio en temps r√©el"""
        try:
            risk_score = 0.0
            risk_alerts = []
            
            # 1. Drawdown check
            if portfolio_value > self.peak_value:
                self.peak_value = portfolio_value
            
            current_drawdown = (self.peak_value - portfolio_value) / self.peak_value
            if current_drawdown > self.max_drawdown:
                self.max_drawdown = current_drawdown
            
            if current_drawdown > self.config.max_drawdown_limit:
                risk_score += 0.4
                risk_alerts.append(f"üö® DRAWDOWN CRITIQUE: {current_drawdown:.1%}")
            
            # 2. Position concentration check
            if positions:
                total_position_value = sum(p.get('value', 0) for p in positions)
                if total_position_value > 0:
                    largest_position = max(p.get('value', 0) for p in positions)
                    concentration = largest_position / total_position_value
                    
                    max_concentration = TradingConstants.MAX_POSITION_CONCENTRATION if TradingConstants else 0.5
                    if concentration > max_concentration:  # Plus de 50% dans une position
                        risk_score += 0.3
                        risk_alerts.append(f"‚ö†Ô∏è CONCENTRATION √âLEV√âE: {concentration:.1%}")
            
            # 3. Daily loss check
            if self.daily_pnl < -self.config.daily_loss_limit * self.config.initial_capital:
                risk_score += 0.3
                risk_alerts.append(f"üö® PERTE QUOTIDIENNE: ${self.daily_pnl:.2f}")
            
            # 4. Market volatility check
            if market_data is not None and not market_data.empty and 'volatility' in market_data.columns:
                try:
                    avg_volatility = market_data['volatility'].mean()
                    volatility_threshold = TradingConstants.HIGH_VOLATILITY_THRESHOLD if TradingConstants else 0.05
                    if avg_volatility > volatility_threshold:  # 5% volatilit√©
                        risk_score += 0.2
                        risk_alerts.append(f"‚ö†Ô∏è VOLATILIT√â √âLEV√âE: {avg_volatility:.1%}")
                except (ValueError, TypeError):
                    # Ignorer si calcul volatilit√© √©choue
                    pass
            
            # Classification risque
            risk_critical = TradingConstants.RISK_CRITICAL_THRESHOLD if TradingConstants else 0.8
            risk_high = TradingConstants.RISK_HIGH_THRESHOLD if TradingConstants else 0.6
            risk_moderate = TradingConstants.RISK_MODERATE_THRESHOLD if TradingConstants else 0.4
            risk_low = TradingConstants.RISK_LOW_THRESHOLD if TradingConstants else 0.2
            
            if risk_score >= risk_critical:
                risk_level = "CRITIQUE"
            elif risk_score >= risk_high:
                risk_level = "√âLEV√â"
            elif risk_score >= risk_moderate:
                risk_level = "MOD√âR√â"
            elif risk_score >= risk_low:
                risk_level = "FAIBLE"
            else:
                risk_level = "MINIMAL"
            
            return {
                'risk_score': risk_score,
                'risk_level': risk_level,
                'alerts': risk_alerts,
                'drawdown': current_drawdown,
                'max_drawdown': self.max_drawdown,
                'daily_pnl': self.daily_pnl
            }
            
        except (KeyError, AttributeError) as e:
            if EXCEPTIONS_AVAILABLE:
                raise RiskAssessmentError('missing_data', portfolio_value, f'Missing required data: {str(e)}', len(positions)) from e
            else:
                logger.error(f"‚ùå Erreur donn√©es manquantes risque: {e}")
                return {'risk_score': 1.0, 'risk_level': 'ERREUR', 'alerts': [f'Donn√©es manquantes: {str(e)}']}
        except ZeroDivisionError as e:
            if EXCEPTIONS_AVAILABLE:
                raise RiskAssessmentError('division_by_zero', portfolio_value, 'Portfolio or position value is zero', len(positions)) from e
            else:
                logger.error(f"‚ùå Erreur division par z√©ro risque: {e}")
                return {'risk_score': 1.0, 'risk_level': 'ERREUR', 'alerts': ['Division par z√©ro d√©tect√©e']}
        except (TypeError, ValueError) as e:
            if EXCEPTIONS_AVAILABLE:
                raise RiskAssessmentError('data_validation', portfolio_value, f'Invalid data types: {str(e)}', len(positions)) from e
            else:
                logger.error(f"‚ùå Erreur validation donn√©es risque: {e}")
                return {'risk_score': 1.0, 'risk_level': 'ERREUR', 'alerts': [f'Donn√©es invalides: {str(e)}']}
        except Exception as e:
            if EXCEPTIONS_AVAILABLE:
                logger.critical(f'üí• Erreur risque inattendue: {e}')
                raise RiskAssessmentError('unexpected_error', portfolio_value, str(e), len(positions)) from e
            else:
                logger.error(f"‚ùå Erreur √©valuation risque: {e}")
                return {'risk_score': 1.0, 'risk_level': 'ERREUR', 'alerts': [str(e)]}

class IntelligenceFusionLayer:
    """LAYER 5: INTELLIGENCE FUSION - Synergie maximale toutes technologies"""
    
    def __init__(self, config: SupremeConfig):
        self.config = config
        self.decision_history = []
        self.fusion_weights = {
            'quantum': TradingConstants.FUSION_WEIGHT_QUANTUM if TradingConstants else 0.25,
            'memory': TradingConstants.FUSION_WEIGHT_MEMORY if TradingConstants else 0.25,
            'trading': TradingConstants.FUSION_WEIGHT_TRADING if TradingConstants else 0.25,
            'predictor': TradingConstants.FUSION_WEIGHT_PREDICTOR if TradingConstants else 0.15,
            'risk': TradingConstants.FUSION_WEIGHT_RISK if TradingConstants else 0.10
        }
        
        logger.info("üß† LAYER INTELLIGENCE FUSION - Synergie maximale activ√©e")
    
    def make_unified_decision(self, market_context: Dict, quantum_insights: Dict,
                             memory_experiences: List[Dict], risk_assessment: Dict,
                             current_positions: List[Dict]) -> Dict:
        """Prendre d√©cision unifi√©e combinant toutes les intelligences"""
        try:
            # 1. Analyse quantum
            quantum_score = quantum_insights.get('quantum_score', 0.0)
            quantum_high = TradingConstants.QUANTUM_HIGH_SCORE if TradingConstants else 0.6
            quantum_low = TradingConstants.QUANTUM_LOW_SCORE if TradingConstants else 0.4
            quantum_neutral = TradingConstants.QUANTUM_NEUTRAL_SCORE if TradingConstants else 0.5
            
            quantum_action = "BUY" if quantum_score > quantum_high else "SELL" if quantum_score < quantum_low else "HOLD"
            quantum_confidence = abs(quantum_score - quantum_neutral) * 2  # 0 √† 1
            
            # 2. Analyse m√©moire
            memory_action, memory_confidence = self._analyze_memory_experiences(
                market_context, memory_experiences
            )
            
            # 3. Analyse trading
            trading_action, trading_confidence = self._analyze_trading_signals(
                market_context, current_positions
            )
            
            # 4. Analyse risque
            risk_action, risk_confidence = self._analyze_risk_signals(risk_assessment)
            
            # 5. Signal pr√©dicteur (facultatif si disponible)
            predictor_action, predictor_confidence = "HOLD", 0.0
            if 'predicted_price' in market_context and 'price' in market_context:
                try:
                    predicted_price = market_context['predicted_price']
                    current_price = market_context['price']
                    if predicted_price is not None and current_price:
                        price_change = (predicted_price - current_price) / max(1e-8, current_price)
                        significant_change = TradingConstants.SIGNIFICANT_PRICE_CHANGE if TradingConstants else 0.01
                        
                        if price_change > significant_change:
                            predictor_action, predictor_confidence = "BUY", min(1.0, abs(price_change) * 5)
                        elif price_change < -significant_change:
                            predictor_action, predictor_confidence = "SELL", min(1.0, abs(price_change) * 5)
                        else:
                            predictor_action, predictor_confidence = "HOLD", 0.3
                except Exception:
                    predictor_action, predictor_confidence = "HOLD", 0.0

            # 6. FUSION INTELLIGENTE
            final_decision = self._fuse_decisions(
                quantum_action, quantum_confidence,
                memory_action, memory_confidence,
                trading_action, trading_confidence,
                risk_action, risk_confidence
            )

            # Ajouter contribution du pr√©dicteur si disponible
            if predictor_confidence > 0:
                action_scores = {}
                self._add_action_score(action_scores, final_decision['action'], final_decision['confidence'])
                self._add_action_score(action_scores, predictor_action, predictor_confidence * self.fusion_weights['predictor'])
                best_action = max(action_scores.items(), key=lambda x: x[1])
                final_decision['action'] = best_action[0]
                final_decision['confidence'] = min(1.0, best_action[1])
            
            # Enregistrer d√©cision
            decision_record = {
                'timestamp': datetime.now(),
                'market_context': market_context,
                'quantum': {'action': quantum_action, 'confidence': quantum_confidence},
                'memory': {'action': memory_action, 'confidence': memory_confidence},
                'trading': {'action': trading_action, 'confidence': trading_confidence},
                'risk': {'action': risk_action, 'confidence': risk_confidence},
                'final_decision': final_decision
            }
            
            self.decision_history.append(decision_record)
            
            logger.info(f"üß† D√©cision unifi√©e: {final_decision['action']} "
                       f"(Confiance: {final_decision['confidence']:.1%})")
            
            return final_decision
            
        except (KeyError, AttributeError) as e:
            if EXCEPTIONS_AVAILABLE:
                raise DecisionFusionError('data_access', ['quantum', 'memory', 'trading', 'risk'], f'Missing data: {str(e)}') from e
            else:
                logger.error(f"‚ùå Erreur acc√®s donn√©es d√©cision: {e}")
                return {'action': 'HOLD', 'confidence': 0.0, 'reason': 'data_access_error'}
        except (TypeError, ValueError) as e:
            if EXCEPTIONS_AVAILABLE:
                raise DecisionFusionError('data_validation', ['quantum', 'memory', 'trading', 'risk'], f'Invalid data: {str(e)}') from e
            else:
                logger.error(f"‚ùå Erreur validation donn√©es d√©cision: {e}")
                return {'action': 'HOLD', 'confidence': 0.0, 'reason': 'data_validation_error'}
        except Exception as e:
            if EXCEPTIONS_AVAILABLE:
                logger.critical(f'üí• Erreur d√©cision unifi√©e inattendue: {e}')
                raise DecisionFusionError('unexpected_error', ['quantum', 'memory', 'trading', 'risk'], str(e)) from e
            else:
                logger.error(f"‚ùå Erreur d√©cision unifi√©e: {e}")
                return {'action': 'HOLD', 'confidence': 0.0, 'reason': 'error'}
    
    def _analyze_memory_experiences(self, context: Dict, experiences: List[Dict]) -> Tuple[str, float]:
        """Analyser exp√©riences m√©moire pour d√©cision"""
        if not experiences:
            return "HOLD", 0.0
        
        # Analyser patterns des exp√©riences similaires
        successful_experiences = [exp for exp in experiences if exp.get('success', False)]
        
        if not successful_experiences:
            return "HOLD", 0.0
        
        # Compter actions r√©ussies
        action_counts = {}
        for exp in successful_experiences:
            action = exp.get('action', 'HOLD')
            action_counts[action] = action_counts.get(action, 0) + 1
        
        if not action_counts:
            return "HOLD", 0.0
        
        # Action la plus r√©ussie
        best_action = max(action_counts.items(), key=lambda x: x[1])
        confidence = best_action[1] / len(successful_experiences)
        
        return best_action[0], confidence
    
    def _analyze_trading_signals(self, context: Dict, positions: List[Dict]) -> Tuple[str, float]:
        """Analyser signaux trading pour d√©cision"""
        # Logique simple bas√©e sur indicateurs techniques
        rsi = context.get('rsi', 50)
        macd = context.get('macd', 0)
        
        if rsi < TradingConstants.RSI_OVERSOLD and macd > 0:
            return TradingActions.BUY, TradingConstants.HIGH_CONFIDENCE_THRESHOLD
        elif rsi > TradingConstants.RSI_OVERBOUGHT and macd < 0:
            return TradingActions.SELL, TradingConstants.HIGH_CONFIDENCE_THRESHOLD
        else:
            return TradingActions.HOLD, TradingConstants.MIN_CONFIDENCE_THRESHOLD
    
    def _analyze_risk_signals(self, risk_assessment: Dict) -> Tuple[str, float]:
        """Analyser signaux risque pour d√©cision"""
        risk_score = risk_assessment.get('risk_score', 0.0)
        
        if risk_score > TradingConstants.RISK_HIGH_THRESHOLD:
            return "REDUCE", TradingConstants.EXTREME_CONFIDENCE_THRESHOLD  # R√©duire positions
        elif risk_score > TradingConstants.RISK_MODERATE_THRESHOLD:
            return TradingActions.HOLD, TradingConstants.HIGH_CONFIDENCE_THRESHOLD    # Maintenir positions
        else:
            return "INCREASE", TradingConstants.HIGH_CONFIDENCE_THRESHOLD  # Augmenter positions
    
    def _fuse_decisions(self, q_action: str, q_conf: float,
                        m_action: str, m_conf: float,
                        t_action: str, t_conf: float,
                        r_action: str, r_conf: float) -> Dict:
        """Fusionner toutes les d√©cisions en une seule intelligente"""
        
        # Calculer score pond√©r√© pour chaque action
        action_scores = {}
        
        # Quantum
        self._add_action_score(action_scores, q_action, q_conf * self.fusion_weights['quantum'])
        
        # Memory
        self._add_action_score(action_scores, m_action, m_conf * self.fusion_weights['memory'])
        
        # Trading
        self._add_action_score(action_scores, t_action, t_conf * self.fusion_weights['trading'])
        
        # Risk (peut modifier les autres actions)
        if r_action == "REDUCE":
            # R√©duire confiance de toutes les actions
            for action in action_scores:
                action_scores[action] *= TradingConstants.MIN_CONFIDENCE_THRESHOLD
        
        # Action avec score le plus √©lev√©
        if not action_scores:
            return {'action': 'HOLD', 'confidence': 0.0}
        
        best_action = max(action_scores.items(), key=lambda x: x[1])
        total_confidence = best_action[1]
        
        return {
            'action': best_action[0],
            'confidence': min(1.0, total_confidence),
            'quantum_contribution': q_conf * self.fusion_weights['quantum'],
            'memory_contribution': m_conf * self.fusion_weights['memory'],
            'trading_contribution': t_conf * self.fusion_weights['trading'],
            'risk_modification': r_action
        }
    
    def _add_action_score(self, action_scores: Dict, action: str, score: float):
        """Ajouter score pour une action"""
        if action not in action_scores:
            action_scores[action] = 0.0
        action_scores[action] += score

class QuantumMemorySupremeAgent:
    """
    üöÄ AGENT SUPR√äME UNIFI√â - Toutes technologies r√©volutionnaires
    üéØ L'AGENT DE TRADING LE PLUS AVANC√â AU MONDE
    """
    
    def __init__(self, config: Optional[SupremeConfig] = None):
        self.config = config or SupremeConfig()
        
        # Initialiser tous les layers
        self.quantum_layer = QuantumLayer(self.config)
        self.memory_layer = MemoryDecoderLayer(self.config)
        self.trading_layer = TradingCoreLayer(self.config)
        self.risk_layer = RiskManagementLayer(self.config)
        self.fusion_layer = IntelligenceFusionLayer(self.config)
        
        # Modules int√©gr√©s: pr√©dicteur, indicateurs r√©els, monitoring
        self.price_predictor = None
        if PricePredictor is not None:
            try:
                self.price_predictor = PricePredictor(sequence_length=self.config.predictor_sequence_length)
            except Exception:
                self.price_predictor = None
        
        self.indicators_calculator = None
        if RealIndicatorsCalculator is not None:
            try:
                self.indicators_calculator = RealIndicatorsCalculator()
                # Ajuster cache si config diff√©rent
                if hasattr(self.indicators_calculator, 'cache_duration'):
                    self.indicators_calculator.cache_duration = self.config.indicators_cache_seconds
            except Exception:
                self.indicators_calculator = None
        
        self.monitoring = None
        self._model_id = "supreme_agent"
        if ModelMonitoringSystem is not None:
            try:
                self.monitoring = ModelMonitoringSystem()
                self.monitoring.register_model(self._model_id, {
                    'accuracy': TradingConstants.HIGH_CONFIDENCE_THRESHOLD,
                    'precision': TradingConstants.HIGH_CONFIDENCE_THRESHOLD - 0.05,
                    'recall': TradingConstants.HIGH_CONFIDENCE_THRESHOLD - 0.1,
                    'f1': TradingConstants.HIGH_CONFIDENCE_THRESHOLD - 0.08,
                    'mean_confidence': TradingConstants.HIGH_CONFIDENCE_THRESHOLD - 0.1
                })
            except Exception:
                self.monitoring = None
        
        # Gestionnaire de r√©cup√©ration d'erreur
        self.error_recovery = None
        if EXCEPTIONS_AVAILABLE:
            try:
                self.error_recovery = ErrorRecoveryManager(self.config)
                logger.info("üîÑ Gestionnaire de r√©cup√©ration d'erreur initialis√©")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è √âchec initialisation gestionnaire r√©cup√©ration: {e}")
        
        # √âtat global
        self.is_running = False
        self.performance_metrics = {
            'total_return': 0.0,
            'sharpe_ratio': 0.0,
            'max_drawdown': 0.0,
            'win_rate': 0.0,
            'total_trades': 0
        }
        
        logger.info("üöÄ QUANTUM MEMORY SUPREME AGENT - Initialisation compl√®te")
        logger.info(f"   Capital: ${self.config.initial_capital:,.2f}")
        logger.info(f"   M√©moire: {self.config.memory_size:,} exp√©riences")
        logger.info(f"   Quantum: Boost {self.config.quantum_boost_factor:.1%}")
    
    def start_trading(self, market_data: pd.DataFrame, symbols: List[str]) -> bool:
        """D√©marrer trading automatique intelligent"""
        try:
            # VALIDATION DONN√âES MARCH√â
            if TradingValidators:
                TradingValidators.validate_market_data(market_data)
                TradingValidators.validate_config(self.config)
            else:
                # Fallback validation basique
                if market_data is None or (hasattr(market_data, 'empty') and market_data.empty):
                    raise ValueError('Donn√©es de march√© invalides ou vides')
                if not symbols or not isinstance(symbols, list):
                    raise ValueError('Symbols doit √™tre une liste non-vide')
            
            logger.info("üöÄ D√âMARRAGE TRADING SUPR√äME - Toutes technologies activ√©es")
            
            self.is_running = True
            run_start_time = time.time()
            step_counter = 0
            
            # Entrainer rapidement le pr√©dicteur si disponible (faible nombre d'√©poques)
            if self.price_predictor is not None:
                try:
                    self.price_predictor.train_model(market_data.copy(), epochs=self.config.predictor_train_epochs, batch_size=16)
                except Exception as _:
                    pass
            
            # Boucle principale de trading
            for i, (timestamp, row) in enumerate(market_data.iterrows()):
                if not self.is_running:
                    break
                # Garde-fous d'arr√™t
                step_counter += 1
                if step_counter >= self.config.max_steps_per_run:
                    logger.info("‚èπÔ∏è Arr√™t: max_steps_per_run atteint")
                    break
                if (time.time() - run_start_time) > self.config.max_runtime_seconds:
                    logger.info("‚èπÔ∏è Arr√™t: max_runtime_seconds atteint")
                    break
                
                cycle_start = time.time()
                # 1. Analyser march√© (r√©el si possible)
                market_context = self._extract_market_context_enhanced(row, symbols)
                
                # 2. Optimisation quantum
                current_market_data = market_data.iloc[:i+1] if i > 0 else market_data.iloc[:1]
                quantum_insights = self.quantum_layer.quantum_optimize_portfolio(
                    self.trading_layer.positions, current_market_data
                )
                
                # 3. R√©cup√©ration m√©moire
                memory_experiences = self.memory_layer.retrieve_similar_experiences(
                    market_context, k=self.config.k_neighbors
                )
                
                # 4. √âvaluation risque
                risk_assessment = self.risk_layer.assess_risk(
                    self.trading_layer.capital, self.trading_layer.positions, current_market_data
                )

                # 4bis. Pr√©diction Transformer si dispo
                if self.price_predictor is not None and self.price_predictor.model is not None:
                    try:
                        recent_df = self._create_prediction_dataframe(current_market_data)
                        market_context['predicted_price'] = self.price_predictor.predict_next_price(recent_df)
                    except Exception:
                        market_context['predicted_price'] = None
                
                # 5. D√©cision unifi√©e
                decision = self.fusion_layer.make_unified_decision(
                    market_context, quantum_insights, memory_experiences, 
                    risk_assessment, self.trading_layer.positions
                )
                
                # 6. Ex√©cution trade si n√©cessaire
                if decision['action'] in ['BUY', 'SELL'] and decision['confidence'] > self.config.confidence_threshold:
                    self._execute_decision(decision, market_context, row)
                
                # 7. Stockage exp√©rience
                if i > 0:  # Pas pour le premier point
                    self._store_trading_experience(market_context, decision, row)

                # 8. Monitoring latence/throughput
                if self.monitoring is not None:
                    try:
                        # Simuler y_true/y_pred binaire pour pipeline de monitoring
                        import numpy as _np
                        y_true = _np.random.randint(0, 2, 64)
                        y_pred = _np.random.randint(0, 2, 64)
                        asyncio.run(self.monitoring.monitor_model_performance(self._model_id, y_true, y_pred))
                    except Exception:
                        pass
                
                # Logging p√©riodique
                if i % 100 == 0:
                    self._log_performance_update(i, len(market_data))
                _ = time.time() - cycle_start
            
            logger.info("‚úÖ TRADING SUPR√äME TERMIN√â - Performance finale calcul√©e")
            self._calculate_final_performance()
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur trading supr√™me: {e}")
            self.is_running = False
            return False
    
    async def start_trading_async(self, market_data: pd.DataFrame, symbols: List[str]) -> bool:
        """Version parall√©lis√©e haute performance du trading"""
        logger.info('üöÄ TRADING PARALL√âLIS√â - Performance optimis√©e')
        self.is_running = True
        
        # Contr√¥le concurrence
        semaphore = asyncio.Semaphore(4)
        
        async def process_batch_async(batch_data: pd.DataFrame) -> List[Dict]:
            """Traiter un batch de donn√©es en parall√®le"""
            async with semaphore:
                results = []
                for i, (timestamp, row) in enumerate(batch_data.iterrows()):
                    start_time = time.time()
                    result = await self._process_row_async(i, row, symbols)
                    end_time = time.time()
                    
                    # Monitoring performance
                    if hasattr(self, 'performance_monitor'):
                        self.performance_monitor.track_latency('row_processing', start_time, end_time)
                    
                    results.append(result)
                return results
        
        # Traitement par batches parall√®les
        batch_size = 50
        total_batches = len(market_data) // batch_size + 1
        
        for batch_idx in range(0, len(market_data), batch_size):
            batch_end = min(batch_idx + batch_size, len(market_data))
            batch_data = market_data.iloc[batch_idx:batch_end]
            
            # Traitement asynchrone
            batch_results = await process_batch_async(batch_data)
            
            # Progress logging
            progress = ((batch_end / len(market_data)) * 100)
            logger.info(f'üìä Progression parall√®le: {progress:.1f}%')
            
            # Respect des limites de s√©curit√©
            if batch_idx >= self.config.max_steps_per_run:
                break
        
        return True
    
    async def _process_row_async(self, i: int, row: pd.Series, symbols: List[str]) -> Dict:
        """Traitement asynchrone d'une ligne de donn√©es"""
        try:
            # Extraction context (non-blocking)
            market_context = await asyncio.to_thread(
                self._extract_market_context_enhanced, row, symbols
            )
            
            # Analyses parall√®les
            quantum_task = asyncio.create_task(
                asyncio.to_thread(self.quantum_layer.quantum_optimize_portfolio,
                                self.trading_layer.positions, None)
            )
            
            memory_task = asyncio.create_task(
                asyncio.to_thread(self.memory_layer.retrieve_similar_experiences, market_context)
            )
            
            risk_task = asyncio.create_task(
                asyncio.to_thread(self.risk_layer.assess_risk,
                                self.trading_layer.capital, self.trading_layer.positions, None)
            )
            
            # Attendre toutes les analyses
            quantum_insights, memory_experiences, risk_assessment = await asyncio.gather(
                quantum_task, memory_task, risk_task
            )
            
            # D√©cision unifi√©e
            decision = self.fusion_layer.make_unified_decision(
                market_context, quantum_insights, memory_experiences,
                risk_assessment, self.trading_layer.positions
            )
            
            return {'success': True, 'decision': decision, 'context': market_context}
            
        except (KeyError, AttributeError) as e:
            if EXCEPTIONS_AVAILABLE:
                raise MemoryDecodingError('async_processing', 0, str(e), {'row_index': i, 'symbols': symbols}) from e
            else:
                logger.error(f'‚ùå Erreur acc√®s donn√©es async ligne {i}: {e}')
                return {'success': False, 'error': f'data_access_error: {str(e)}'}
        except (TypeError, ValueError) as e:
            if EXCEPTIONS_AVAILABLE:
                raise MemoryDecodingError('async_validation', 0, f'Invalid data: {str(e)}', {'row_index': i, 'symbols': symbols}) from e
            else:
                logger.error(f'‚ùå Erreur validation donn√©es async ligne {i}: {e}')
                return {'success': False, 'error': f'data_validation_error: {str(e)}'}
        except Exception as e:
            if EXCEPTIONS_AVAILABLE:
                logger.critical(f'üí• Erreur async inattendue ligne {i}: {e}')
                raise MemoryDecodingError('unexpected_error', 0, str(e)) from e
            else:
                logger.error(f'‚ùå Erreur traitement async ligne {i}: {e}')
                return {'success': False, 'error': str(e)}
    
    def _extract_market_context(self, row: pd.Series, symbols: List[str]) -> Dict:
        """Extraire contexte march√© depuis donn√©es"""
        return {
            'timestamp': row.name if hasattr(row, 'name') else datetime.now(),
            'price': row.get('close', 100),
            'rsi': row.get('rsi', 50),
            'macd': row.get('macd', 0),
            'volume': row.get('volume', 1000000),
            'volatility': row.get('volatility', TradingConstants.LOW_VOLATILITY_THRESHOLD),
            'symbols': symbols
        }

    def _extract_market_context_enhanced(self, row: pd.Series, symbols: List[str]) -> Dict:
        """Contexte march√© en privil√©giant les donn√©es r√©elles via `RealIndicatorsCalculator`."""
        if self.indicators_calculator is not None and symbols:
            try:
                real = self.indicators_calculator.get_real_market_data(symbols[0])
                if real:
                    return {
                        'timestamp': real.get('timestamp', datetime.now()),
                        'price': real.get('price', row.get('close', 100)),
                        'rsi': real.get('rsi', row.get('rsi', 50)),
                        'macd': real.get('macd', row.get('macd', 0)),
                        'volume': real.get('volume', row.get('volume', 1000000)),
                        'volatility': abs(real.get('change_24h', 0.0)) / 100,  # Calcul√© dynamiquement
                        'symbols': symbols,
                        'source': real.get('source', 'real_data')
                    }
            except Exception:
                pass
        # Fallback vers donn√©es simul√©es
        return self._extract_market_context(row, symbols)

    def _create_prediction_dataframe(self, df: pd.DataFrame) -> pd.DataFrame:
        """Pr√©parer un DataFrame avec les features attendues par le pr√©dicteur."""
        required = ['open', 'high', 'low', 'close', 'volume', 'rsi', 'macd']
        out = df.copy()
        for col in required:
            if col not in out.columns:
                if col in ['rsi', 'macd']:
                    out[col] = TradingConstants.RSI_NEUTRAL if col == 'rsi' else 0.0
                elif col == 'volume':
                    out[col] = 1_000_000
                else:
                    out[col] = out['close'] if 'close' in out.columns else TradingConstants.MIN_PRICE_VALIDATION
        return out[required]
    
    def _execute_decision(self, decision: Dict, context: Dict, market_data: pd.Series):
        """Ex√©cuter d√©cision de trading"""
        try:
            action = decision['action']
            symbol = context.get('symbols', ['DEFAULT'])[0] if context.get('symbols') else 'DEFAULT'
            price = market_data.get('close', 100)
            
            # Calculer taille position bas√©e sur confiance
            position_size = self.config.position_size_base * decision['confidence']
            quantity = (self.trading_layer.capital * position_size) / price
            
            if action == "BUY":
                result = self.trading_layer.execute_trade("BUY", symbol, quantity, price, context)
            elif action == "SELL":
                result = self.trading_layer.execute_trade("SELL", symbol, quantity, price, context)
            
            if result.get('success'):
                logger.info(f"üí∞ {action} ex√©cut√©: {quantity:.2f} {symbol} @ ${price:.2f}")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur ex√©cution d√©cision: {e}")
    
    def _store_trading_experience(self, context: Dict, decision: Dict, market_data: pd.Series):
        """Stocker exp√©rience de trading pour m√©moire"""
        try:
            # Calculer reward bas√© sur performance
            reward = 0.0
            if decision['action'] in [TradingActions.BUY, TradingActions.SELL]:
                # Reward simplifi√© (dans la vraie vie, bas√© sur P&L r√©el)
                reward = decision['confidence'] * TradingConstants.MIN_CONFIDENCE_THRESHOLD
            
            # Stocker dans m√©moire
            self.memory_layer.store_experience(
                context, 
                self._action_to_int(decision['action']), 
                reward,
                {'decision': decision, 'market_data': market_data.to_dict()}
            )
            
        except Exception as e:
            logger.error(f"‚ùå Erreur stockage exp√©rience: {e}")
    
    def _action_to_int(self, action: str) -> int:
        """Convertir action string en int pour m√©moire"""
        action_map = {'BUY': 1, 'SELL': 2, 'HOLD': 0, 'REDUCE': 3, 'INCREASE': 4}
        return action_map.get(action, 0)
    
    def _log_performance_update(self, current_step: int, total_steps: int):
        """Logging mise √† jour performance"""
        progress = (current_step / total_steps) * 100
        current_capital = self.trading_layer.capital
        
        logger.info(f"üìä Progression: {progress:.1f}% - Capital: ${current_capital:,.2f}")
    
    def _calculate_final_performance(self):
        """Calculer m√©triques de performance finales"""
        try:
            initial_capital = self.config.initial_capital
            final_capital = self.trading_layer.capital
            
            # Calculer m√©triques
            total_return = (final_capital / initial_capital - 1) * 100
            win_rate = (self.trading_layer.winning_trades / self.trading_layer.total_trades * 100) if self.trading_layer.total_trades > 0 else 0
            
            # Calculer Sharpe ratio (simplifi√©)
            if len(self.trading_layer.portfolio_history) > 1:
                returns = []
                for i in range(1, len(self.trading_layer.portfolio_history)):
                    prev_value = self.trading_layer.portfolio_history[i-1]['total_value']
                    curr_value = self.trading_layer.portfolio_history[i]['total_value']
                    daily_return = (curr_value - prev_value) / prev_value
                    returns.append(daily_return)
                
                if returns:
                    avg_return = np.mean(returns)
                    std_return = np.std(returns)
                    sharpe_ratio = (avg_return / std_return) * np.sqrt(252) if std_return > 0 else 0
                else:
                    sharpe_ratio = 0.0
            else:
                sharpe_ratio = 0.0
            
            # Mettre √† jour m√©triques
            self.performance_metrics.update({
                'total_return': total_return,
                'sharpe_ratio': sharpe_ratio,
                'max_drawdown': self.risk_layer.max_drawdown * 100,
                'win_rate': win_rate,
                'total_trades': self.trading_layer.total_trades
            })
            
            # Logging final
            logger.info("üèÜ PERFORMANCE FINALE CALCUL√âE:")
            logger.info(f"   Return Total: {total_return:.2f}%")
            logger.info(f"   Sharpe Ratio: {sharpe_ratio:.2f}")
            logger.info(f"   Max Drawdown: {self.performance_metrics['max_drawdown']:.2f}%")
            logger.info(f"   Win Rate: {win_rate:.1f}%")
            logger.info(f"   Total Trades: {self.trading_layer.total_trades}")
            
        except (KeyError, AttributeError) as e:
            if EXCEPTIONS_AVAILABLE:
                raise MemoryDecodingError('performance_calculation', 0, str(e), {'method': '_calculate_final_performance'}) from e
            else:
                logger.error(f"‚ùå Erreur acc√®s donn√©es performance: {e}")
        except (TypeError, ValueError) as e:
            if EXCEPTIONS_AVAILABLE:
                raise MemoryDecodingError('performance_validation', 0, f'Invalid data: {str(e)}', {'method': '_calculate_final_performance'}) from e
            else:
                logger.error(f"‚ùå Erreur validation donn√©es performance: {e}")
        except Exception as e:
            if EXCEPTIONS_AVAILABLE:
                logger.critical(f'üí• Erreur performance inattendue: {e}')
                raise MemoryDecodingError('unexpected_error', 0, str(e)) from e
            else:
                logger.error(f"‚ùå Erreur calcul performance: {e}")
    
    def stop_trading(self):
        """Arr√™ter trading automatique"""
        logger.info("üõë ARR√äT TRADING SUPR√äME")
        self.is_running = False
    
    def get_performance_summary(self) -> Dict:
        """Obtenir r√©sum√© performance complet"""
        return {
            'agent_status': 'RUNNING' if self.is_running else 'STOPPED',
            'performance_metrics': self.performance_metrics,
            'memory_stats': {
                'total_experiences': len(self.memory_layer.memory_datastore['keys']),
                'memory_utilization': len(self.memory_layer.memory_datastore['keys']) / self.config.memory_size
            },
            'trading_stats': {
                'current_capital': self.trading_layer.capital,
                'open_positions': len(self.trading_layer.positions),
                'total_trades': self.trading_layer.total_trades
            },
            'risk_stats': {
                'current_drawdown': self.risk_layer.max_drawdown,
                'risk_alerts': len(self.risk_layer.risk_alerts)
            }
        }

def main():
    """Test de l'AGENT SUPR√äME UNIFI√â"""
    print("="*80)
    print("üöÄ TEST QUANTUM MEMORY SUPREME AGENT - AGENT SUPR√äME UNIFI√â")
    print("="*80)
    
    # Configuration supr√™me
    config = SupremeConfig()
    
    # Cr√©er agent supr√™me
    supreme_agent = QuantumMemorySupremeAgent(config)
    
    # Cr√©er donn√©es de test
    dates = pd.date_range(start='2023-01-01', end='2024-01-01', freq='D')
    test_data = pd.DataFrame({
        'open': 100 + np.random.randn(len(dates)) * 2,
        'high': 100 + np.random.randn(len(dates)) * 3,
        'low': 100 + np.random.randn(len(dates)) * 2,
        'close': 100 + np.random.randn(len(dates)) * 2,
        'volume': np.random.uniform(900000, 1100000, len(dates)),
                    'rsi': TradingConstants.RSI_NEUTRAL + np.random.randn(len(dates)) * 15,
                    'macd': np.random.randn(len(dates)) * 0.5,
            'volatility': np.random.uniform(TradingConstants.MIN_PRICE_CHANGE, TradingConstants.HIGH_VOLATILITY_THRESHOLD, len(dates))
    }, index=dates)
    
    # D√©marrer trading supr√™me (version asynchrone pour performance)
    print("\nüöÄ D√©marrage trading supr√™me ASYNCHRONE...")
    success = asyncio.run(supreme_agent.start_trading_async(test_data, ['AAPL']))
    
    if success:
        # Obtenir r√©sum√© performance
        summary = supreme_agent.get_performance_summary()
        
        print("\n" + "="*80)
        print("üèÜ R√âSULTATS AGENT SUPR√äME UNIFI√â")
        print("="*80)
        
        for key, value in summary.items():
            if isinstance(value, dict):
                print(f"\n{key.upper()}:")
                for sub_key, sub_value in value.items():
                    print(f"  {sub_key}: {sub_value}")
            else:
                print(f"{key}: {value}")
        
        print("\n‚úÖ AGENT SUPR√äME UNIFI√â TEST√â AVEC SUCC√àS!")
        print("üéØ Cet agent combine TOUTES les technologies r√©volutionnaires!")
        print("‚öõÔ∏è Quantum Computing + üß† Memory Decoder + ü§ñ PPO + üìä MPS + üí∞ Capital R√©aliste")
        
    else:
        print("‚ùå Test agent supr√™me √©chou√©")

if __name__ == "__main__":
    main()
